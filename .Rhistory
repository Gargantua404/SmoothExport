MergeCells(is_footer = !is.null(df_struct$footer),
columns = df_struct$columns_to_merge,
rows =  df_struct$rows_to_merge,
cells = df_struct$cells_to_merge) %>%
SetWidthCells(df_struct$table_width)
return(df_flex)
}
#' @title Default styles for objects exporting
#' @description Store default styles settings for flextable or figures exporting into Word document
#'
#' @return set of styles
DocExportStyles <- function(){
rez <- list()
rez$header_style <- list(text = officer::fp_text(color = "black", font.size = 12, bold = TRUE, italic = FALSE, underlined = FALSE, font.family = "Times New Roman", vertical.align = "baseline", shading.color = "transparent"),
par = officer::fp_par(text.align = "center"))
rez$body_style <- list(text = officer::update(rez$header_style$text, bold = FALSE))
rez$figure_style <- list(height = 4, width = 6, aligned = "center")
return(rez)
}
#' @title Export objects into a Word document
#' @description  Export flextable objects or ggplot2 figures into a Word document
#'
#' @param filename the name of the target Word document to create
#' @param tables a named list of flextable objects
#' @param tables_title a named list of table titles. The names should correspond to those of \emph{tables} parameter
#' @param figures a named list of \code{ggplot()} objects
#' @param figures_title a named list of figure titles. The names should correspond to those of \emph{figures} parameter
#' @param base_docx_filename the name of another Word file to inherit data from
#'
#' @return The message in console in case of successful Word document creation
#' @export
#'
#' @examples
DocExport <- function(filename, tables = NULL, tables_title = NULL, figures = NULL, figures_title = NULL, base_docx_filename = NULL){
st <- DocDefaultStyles()
#open a doc file to modify
doc <- officer::read_docx(base_docx_filename)
#in case this file was written to previously
if(!is.null(base_docx_filename)) doc <- officer:::body_add_break(doc)
#tables insert
if(!is.null(tables)){
if(is.null(tables_title)){
stop("There are no table titles provided")
}
#common piece of header name for all tables
tables_header_common <- officer::ftext("Table XX.X. ", prop = st$header_style$text)
for (table_name in names(tables)){
#gather both parts of the header together
header <- officer::fpar(tables_header_common,
officer::ftext(tables_title[[table_name]], prop = st$body_style$text),
fp_p = st$header_style$par)
doc <- doc %>%
officer::body_add_fpar(value = header) %>%
flextable::body_add_flextable(value = tables[[table_name]], split = TRUE)
if(which(table_name, names(tables)) != length(tables)){
#dont add page break after the last table inserted
doc <- officer::body_add_break(doc)
}
}
}
#insert figures
if(!is.null(figures)){
if(is.null(figures_title)){
stop("There are no figures titles provided")
}
#common piece of header name for all tables
figure_header_common <- officer::ftext("Figure XX.X. ", prop = st$header_style$text)
for (figure_name in names(figures)){
caption <- officer::fpar(figure_header_common,
officer::ftext(figures_title[[figure_name]], prop = st$body_style$text),
fp_p = st$header_style$par)
doc <- doc %>%
officer::body_add_gg(value = figures[[figure_name]],
width = st$figure_style$width,
height = st$figure_style$height,
style = st$figure_style$aligned) %>%
officer::body_add_fpar(value = caption)
if(which(figure_name, names(figures)) != length(figures)){
#dont add page break after the last table inserted
doc <- officer::body_add_break(doc)
}
}
}
#make a doc file
print(doc, target = filename)
message(sprintf("Word file %s was successfully created", filename))
#TODO:add macros execution here: body_replace_all_text
}
#data definition
t_data <- dplyr::mutate_all(mtcars[1:3, 1:5], as.character) %>%
dplyr::add_row(mpg = "population A", cyl = "population A", disp = "population A", hp = "population A", drat = "population A")  %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[4:6, 1:5], as.character)) %>%
dplyr::add_row(mpg = "norm test:", cyl = "norm test:", disp = "norm test:", hp = "norm test:", drat = "norm test:") %>%
dplyr::add_row(mpg = "p = 0.43", cyl = "p < 0,001", disp = "p = 0,44", hp = "p = 0.004", drat = "p = 0.002") %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[7:9, 1:5], as.character)) %>%
dplyr::add_row(mpg = "population B", cyl = "population B", disp = "population B", hp = "population B", drat = "population B") %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[10:12, 1:5], as.character))
t_df_struct <- list(data = t_data,
header = list(row1 = rep("all columns", ncol(t_data)),
row2 = c(rep("1st column group", floor(ncol(t_data)/2)), rep("2st column group", ceiling(ncol(t_data)/2))),
row3 = names(t_data)),
footer = list(row1 = rep("Note:", ncol(t_data)),
row2 = rep("Nothing special for this table", ncol(t_data)),
row3 = rep("Designation:", ncol(t_data)),
row4 = rep("NA - not available", ncol(t_data))),
rows_to_merge = c(4, 8, 13),
cells_to_merge = list(rect1 = list(rows = 1:2, columns = 1),
rect2 = list(rows = 14:15, columns = 4:5)),
columns_to_merge = 5,
table_width = NULL,
font = 12,
rows_as_footnote_title = c(1, 3),
rows_as_inner_headers = c(4, 13),
rows_section_init = 8,
columns_left_align = c(2, 4),
rows_bold_upper_bordered = 15,
cells_color = list(cell1 = list(row = 15, column = 1),
cell2 = list(row = 16, column = 2)),
rows_p_value_color = 9)
reg_obj <- CreateFLX(t_df_struct)
reg_obj
devtools::document()
?CreateFLX
t_df_struct <- list(data = t_data,
header = list(row1 = rep("all columns", ncol(t_data)),
row2 = c(rep("1st column groups", floor(ncol(t_data)/2)), rep("2st column groups", ceiling(ncol(t_data)/2))),
row3 = names(t_data)),
footer = list(row1 = rep("Note:", ncol(t_data)),
row2 = rep("Nothing special for this table", ncol(t_data))))
CreateFLX(t_df_struct)
t_data <- dplyr::mutate_all(mtcars[1:3, 1:5], as.character) %>%
dplyr::add_row(mpg = "population A", cyl = "population A", disp = "population A", hp = "population A", drat = "population A")  %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[4:6, 1:5], as.character)) %>%
dplyr::add_row(mpg = "norm test:", cyl = "norm test:", disp = "norm test:", hp = "norm test:", drat = "norm test:") %>%
dplyr::add_row(mpg = "p = 0.43", cyl = "p < 0,001", disp = "p = 0,44", hp = "p = 0.004", drat = "p = 0.002") %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[7:9, 1:5], as.character)) %>%
dplyr::add_row(mpg = "population B", cyl = "population B", disp = "population B", hp = "population B", drat = "population B") %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[10:12, 1:5], as.character))
t_df_struct <- list(data = t_data,
header = list(row1 = rep("all columns", ncol(t_data)),
row2 = c(rep("1st column group", floor(ncol(t_data)/2)), rep("2st column group", ceiling(ncol(t_data)/2))),
row3 = names(t_data)),
footer = list(row1 = rep("Note:", ncol(t_data)),
row2 = rep("Nothing special for this table", ncol(t_data)),
row3 = rep("Designation:", ncol(t_data)),
row4 = rep("NA - not available", ncol(t_data))),
rows_to_merge = c(4, 8, 13),
cells_to_merge = list(rect1 = list(rows = 1:2, columns = 1),
rect2 = list(rows = 14:15, columns = 4:5)),
columns_to_merge = 5,
table_width = NULL,
font = 12,
rows_as_footnote_title = c(1, 3),
rows_as_inner_headers = c(4, 13),
rows_section_init = 8,
columns_left_align = c(2, 4),
rows_bold_upper_bordered = 15,
cells_color = list(cell1 = list(row = 15, column = 1),
cell2 = list(row = 16, column = 2)),
rows_p_value_color = 9)
CreateFLX(t_df_struct)
devtools::test()
getwd()
t_flx_obj <- CreateFLX(list(data = mtcars))
t_flname <- paste0(getwd(), "//test_table.docx")
t_flname
t_flname <- paste0(getwd(), "/test_table.docx")
DocExport(filename ,tables = list(table1 = t_flx_obj), tables_title = list(tabl1 = "Test table"))
DocExport(filename ,tables = list(table1 = t_flx_obj), tables_title = list(tabl1 = "Test table"))
devtools::document()
DocExport(filename ,tables = list(table1 = t_flx_obj), tables_title = list(tabl1 = "Test table"))
?update
devtools::document()
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(tabl1 = "Test table"))
?which
devtools::document()
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(tabl1 = "Test table"))
tables_title = list(table1 = "Test table"))
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
t_flx_obj
?flextable::width
debug(SetWidthCells)
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
t_flx_obj <- CreateFLX(list(data = mtcars))
widths
t_flx_obj <- CreateFLX(list(data = mtcars))
debug(CreateFLX)
t_flx_obj <- CreateFLX(list(data = mtcars))
settings_default$table_widths
settings_default$table_width
settings_default <- list(table_width = rep(6.54/ncol(df_struct$data), ncol(df_struct$data)),
font = 10L,
rows_as_footnote_title = 1L,
columns_left_align = NULL,
rows_as_inner_headers = NULL,
rows_section_init = NULL,
rows_to_merge = NULL,
columns_to_merge = NULL,
cells_to_merge = NULL,
rows_bold_upper_bordered = NULL,
cells_color = NULL,
rows_p_value_color = NULL
)
CreateFLX <- function(df_struct){
if(is.null(df_struct$data)){
stop(paste0("The structure with no data is sent into", deparse(sys.call())))
}
#default settings (constant structure)
settings_default <- list(table_width = rep(6.54/ncol(df_struct$data), ncol(df_struct$data)),
font = 10L,
rows_as_footnote_title = 1L,
columns_left_align = NULL,
rows_as_inner_headers = NULL,
rows_section_init = NULL,
rows_to_merge = NULL,
columns_to_merge = NULL,
cells_to_merge = NULL,
rows_bold_upper_bordered = NULL,
cells_color = NULL,
rows_p_value_color = NULL
)
#modify some of not specified settings of the given structure in accordance with default settings
#note: the names of settings_default should correspond to the settings names of the given structure
for (sett_name in names(settings_default)){
if(is.null(df_struct[[sett_name]])){
df_struct[[sett_name]] <- settings_default[[sett_name]]
}
}
#initiate a flextable object
df_flex <- flextable::regulartable(df_struct$data)
#add header
if(length(df_struct$header) > 1L){
#the header consists of more then 1 rows
typology_header <- tibble::as_tibble(df_struct$header) %>%
tibble::add_column(col_keys = colnames(df_struct$data))
#apply unique style
df_flex <- flextable::set_header_df(df_flex, mapping = typology_header, key = "col_keys")
}
#add footer
if(!is.null(df_struct$footer)){
typology_footer <- tibble::as_tibble(df_struct$footer) %>%
tibble::add_column(col_keys = colnames(df_struct$data))
df_flex <- flextable::set_footer_df(df_flex, mapping = typology_footer, key = "col_keys")
}
df_flex <- df_flex %>%
SetBorders() %>%
SetStyle(rows_as_inner_headers = df_struct$rows_as_inner_headers,
rows_section_init = df_struct$rows_section_init,
rows_as_footnote_title = df_struct$rows_as_footnote_title,
font = df_struct$font,
columns_left_align = df_struct$columns_left_align,
rows_bold_upper_bordered = df_struct$rows_bold_upper_bordered,
cells_color = df_struct$cells_color,
rows_p_value_color = df_struct$rows_p_value_color) %>%
MergeCells(is_footer = !is.null(df_struct$footer),
columns = df_struct$columns_to_merge,
rows =  df_struct$rows_to_merge,
cells = df_struct$cells_to_merge) %>%
SetWidthCells(df_struct$table_width)
return(df_flex)
}
debug(CreateFLX)
CreateFLX
t_flx_obj <- CreateFLX(list(data = mtcars))
settings_default$table_width
df_struct$table_width
df_struct$table_width
debug(SetWidthCells)
widths
t_flx_obj <- CreateFLX(list(data = mtcars))
t_flx_obj <- CreateFLX(list(data = mtcars))
devtools::document()
t_flx_obj <- CreateFLX(list(data = mtcars))
t_flname <- paste0(getwd(), "/test_table.docx")
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
devtools::document()
df_flex <- flextable::width(df_flex, j = col, width = widths[col])
t_flx_obj <- CreateFLX(list(data = mtcars))
t_flname <- paste0(getwd(), "/test_table.docx")
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
tables_title = list(table1 = "Test table"))
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
?DocExport
?mtcars
t_flx_obj <- CreateFLX(list(data = mtcars[1:8,]))
t_flx_obj
t_flx_obj2 <- CreateFLX(list(data = mtcars[9:16,]))
t_flx_obj_sec <- CreateFLX(list(data = mtcars[9:16,]))
t_flname_sec <- paste0(getwd(), "/test_table_second.docx")
DocExport(filename = t_flname_sec,
tables = list(table2 = t_flx_obj_sec),
tables_title = list(table2 = "Test table second",
base_docx_filename = t_flname))
t_flx_obj <- CreateFLX(list(data = mtcars[1:8,]))
t_flname <- paste0(getwd(), "/test_table.docx")
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
t_flx_obj_sec <- CreateFLX(list(data = mtcars[9:16,]))
t_flname_sec <- paste0(getwd(), "/test_table_second.docx")
DocExport(filename = t_flname_sec,
tables = list(table2 = t_flx_obj_sec),
tables_title = list(table2 = "Test table second",
base_docx_filename = t_flname))
t_flx_obj_sec
DocExport(filename = t_flname,
tables = list(table2 = t_flx_obj_sec),
tables_title = list(table2 = "Test table second",
base_docx_filename = t_flname))
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
DocExport(filename = t_flname_sec,
debug(DecExport)
debug(DocExport)
DocExport(filename = t_flname_sec,
tables = list(table2 = t_flx_obj_sec),
tables_title = list(table2 = "Test table second",
base_docx_filename = t_flname))
base_docx_filename
undebug(DocExport)
DocExport(filename = t_flname_sec,
tables = list(table2 = t_flx_obj_sec),
tables_title = list(table2 = "Test table second"),
base_docx_filename = t_flname)
devtools::document()
?DocExport
devtools::install_github("Gargantua404/SmoothExport")
devtools::install_github("Gargantua404/SmoothExport")
devtools::install_github("hadley/tyverse/ggplot2")
devtools::install_github("hadley/tydyverse/ggplot2")
devtools::install_github("tydyverse/ggplot2")
devtools::install_github("tidyverse/ggplot2")
traceback()
?utils::download.file
utils::download.file
View(utils::download.file)
capabilities("libcurl")
gh::gh("/rate_limit")
source_url <- "https://github.com/Gargantua404/SmoothExport.git"
getwd()
utils::download.file(source_url, destfile="aa.zip")
utils::download.file(source_url, destfile="aa.zip", method="libcurl")
utils::download.file(url = "https://github.com/Gargantua404/SmoothExport.git", destfile = "df")
utils::download.file(source_url, destfile="aa.zip", method="libcurl")
utils::download.file(source_url, destfile="aa.zip", method="libcurl")
utils::download.file(url = "https://github.com/Gargantua404/SmoothExport.git", destfile = "df")
utils::download.file(url = "https://github.com/Gargantua404/SmoothExport.git", destfile = "df.zip")
R.version
getOption("download.file.method")
capabilities(c("libcurl", "http/ftp"))
?install.packages
install.packages(df.zip)
install.packages("df.zip")
getwd()
install.packages("SmoothExport.zip")
install.packages("C:/Users/Zefirov/OneDrive - SMOOTHDD.COM/Programms/SmoothPrintDf/SmoothExport.zip", repos = NULL, type = "win.binary")
devtools::check()
devtools::check()
t_data <- head(mtcars)
t_df_struct <- list(data = t_data,
header = list(row1 = rep("all columns", ncol(t_data)),
row2 = c(rep("1st column groups", floor(ncol(t_data)/2)), rep("2st column groups", ceiling(ncol(t_data)/2))),
row3 = names(t_data)),
footer = list(row1 = rep("Note:", ncol(t_data)),
row2 = rep("Nothing special for this table", ncol(t_data))))
CreateFLX(t_df_struct)
t_data <- dplyr::mutate_all(mtcars[1:3, 1:5], as.character) %>%
dplyr::add_row(mpg = "population A", cyl = "population A", disp = "population A", hp = "population A", drat = "population A")  %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[4:6, 1:5], as.character)) %>%
dplyr::add_row(mpg = "norm test:", cyl = "norm test:", disp = "norm test:", hp = "norm test:", drat = "norm test:") %>%
dplyr::add_row(mpg = "p = 0.43", cyl = "p < 0,001", disp = "p = 0,44", hp = "p = 0.004", drat = "p = 0.002") %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[7:9, 1:5], as.character)) %>%
dplyr::add_row(mpg = "population B", cyl = "population B", disp = "population B", hp = "population B", drat = "population B") %>%
dplyr::bind_rows(dplyr::mutate_all(mtcars[10:12, 1:5], as.character))
t_df_struct <- list(data = t_data,
header = list(row1 = rep("all columns", ncol(t_data)),
row2 = c(rep("1st column group", floor(ncol(t_data)/2)), rep("2st column group", ceiling(ncol(t_data)/2))),
row3 = names(t_data)),
footer = list(row1 = rep("Note:", ncol(t_data)),
row2 = rep("Nothing special for this table", ncol(t_data)),
row3 = rep("Designation:", ncol(t_data)),
row4 = rep("NA - not available", ncol(t_data))),
rows_to_merge = c(4, 8, 13),
cells_to_merge = list(rect1 = list(rows = 1:2, columns = 1),
rect2 = list(rows = 14:15, columns = 4:5)),
columns_to_merge = 5,
table_width = NULL,
font = 12,
rows_as_footnote_title = c(1, 3),
rows_as_inner_headers = c(4, 13),
rows_section_init = 8,
columns_left_align = c(2, 4),
rows_bold_upper_bordered = 15,
cells_color = list(cell1 = list(row = 15, column = 1),
cell2 = list(row = 16, column = 2)),
rows_p_value_color = 9)
CreateFLX(t_df_struct)
t_flx_obj <- CreateFLX(list(data = mtcars[1:8,]))
t_flname <- paste0(getwd(), "/test_table.docx")
DocExport(filename = t_flname,
tables = list(table1 = t_flx_obj),
tables_title = list(table1 = "Test table"))
t_flx_obj_sec <- CreateFLX(list(data = mtcars[9:16,]))
t_flname_sec <- paste0(getwd(), "/test_table_second.docx")
DocExport(filename = t_flname_sec,
tables = list(table2 = t_flx_obj_sec),
tables_title = list(table2 = "Test table second"),
base_docx_filename = t_flname)
devtools::run_examples()
devtools::check()
?dplyr::`%>%`
?magrittr::`%>%`
devtools::document()
devtools::document()
devtools::run_examples()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
?CreateFLX
devtools::document()
devtools::check()
?CreateFLX
devtools::install_github("Gargantua404/SmoothExport")
utils::download.file(url = "https://github.com/Gargantua404/SmoothExport.git", destfile = "df.zip")
utils::download.file(url = "https://github.com/Gargantua404/SmoothExport.git", destfile = "SmoothExport.zip")
install.packages("SmoothExport.zip")
?SmoothExport
install.packages("C:/Users/Zefirov/OneDrive - SMOOTHDD.COM/Programms/SmoothPrintDf/SmoothExport.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Zefirov/OneDrive - SMOOTHDD.COM/Programms/SmoothPrintDf/SmoothExport-master.zip", repos = NULL, type = "win.binary")
library("SmoothExport")
library("SmoothExport::master")
library("SmoothExport-master")
devtools::install_local("SmoothExport.zip")
devtools::install_local(""C:\Users\Zefirov\OneDrive - SMOOTHDD.COM\Programms\SmoothPrintDf\SmoothExport.zip"")
devtools::install_local(""C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport.zip"")
devtools::install_local(C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport.zip")
devtools::install_local("C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport.zip")
file.exists("C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport.zip")
file.mtime("C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport.zip")
debug(devtools::install_local)
file.mtime("C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport.zip")
devtools::install_local("C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport.zip")
remotes
debug(install_remotes)
debug(install_remote)
debug(install)
pkgdir
devtools::install(pkg = "C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf//SmoothExport")
devtools::install(pkg = "SmoothExport")
sessionInfo()
debug(devtools::install)
sessionInfo()
devtools::install(pkg = "SmoothExport")
pkg$path
debug(remotes::install_deps)
devtools::install(pkg = "SmoothExport")
debug(dev_package_deps)
pkgdir
repos
type
debug(combine_deps)
devtools::install(pkg = "SmoothExport")
devtools::install(pkg = "SmoothExport")
cran_deps
deps
devtools::install(pkg = "SmoothExport")
deps
repos
type
package_deps(deps, repos = repos, type = type)
debug(package_deps)
remote_deps(pkg)
pkg
?remote_deps
remote_deps
remote_deps
devtools::install_local("SmoothExport.zip")
devtools::install_local("SmoothExport.R")
getwd()
devtools::install_local("SmoothExport.zip")
traceback()
install.packages("C:\Users\Zefirov\OneDrive - SMOOTHDD.COM\Programms\SmoothPrintDf\SmoothExport.zip", repos = NULL, type="source")
install.packages("C:\\Users\\Zefirov\\OneDrive - SMOOTHDD.COM\\Programms\\SmoothPrintDf\\SmoothExport.zip", repos = NULL, type="source")
install.packages("SmoothPrintDf.tar.gz", repos = NULL, type="source")
getwd
getwd()
install.packages(""C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf.tar.gz" ", repos = NULL, type="source")
install.packages("C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf.tar.gz", repos = NULL, type="source")
SmoothExport::CreateFLX(list(data = mtcars))
library("SmoothExport", lib.loc="~/R/win-library/3.4")
detach("package:SmoothExport", unload=TRUE)
remove.packages("SmoothExport", lib="~/R/win-library/3.4")
install.packages("C://Users//Zefirov//OneDrive - SMOOTHDD.COM//Programms//SmoothPrintDf.zip", repos = NULL, type="source")
